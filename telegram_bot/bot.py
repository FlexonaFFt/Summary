import asyncio
import aiohttp
import hashlib
import os
import aiofiles
import aioredis
import uuid
from loguru import logger
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery


API_TOKEN = os.getenv("BOT_TOKEN")
FASTAPI_URL = os.getenv("FASTAPI_URL", "http://fastapi:8000")
REDIS_URL = os.getenv("REDIS_URL", "redis://redis")
MAX_REQUESTS_PER_MIN = 5

qa_mode_users = {}
user_last_summary_file = {}

logger.add("/var/log/fastapi/bot.log", rotation="1 day")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

redis = None

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")],
        [KeyboardButton(text="üìÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞")],
    ],
    resize_keyboard=True
)

def get_ask_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—É", callback_data="enter_qa_mode")]
    ])

def get_exit_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö™ –í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤", callback_data="exit_qa_mode")]
    ])


@dp.message(Command("start"))
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:\n"
        "üìå –°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª (PDF, DOCX, TXT)\n"
        "üìå –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ñ–∞–π–ª—É\n\n"
        "–í—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É –Ω–∏–∂–µ üëá",
        reply_markup=menu_kb
    )

@dp.message(lambda m: m.text == "üìù –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞")
async def summarize_text_handler(message: Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")

@dp.message(lambda m: m.text == "üìÑ –°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ñ–∞–π–ª–∞")
async def summarize_file_prompt(message: Message):
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–Ω–µ PDF/DOCX/TXT —Ñ–∞–π–ª –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏.")

@dp.message(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ñ–∞–π–ª—É")
async def ask_question_prompt(message: Message):
    await message.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–∏—à–ª–∏ —Ñ–∞–π–ª, –∑–∞—Ç–µ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ ‚Äî –≤–æ–ø—Ä–æ—Å.")

async def is_limited(user_id: int) -> bool:
    key = f"user:{user_id}:requests"
    current = await redis.incr(key)
    if current == 1:
        await redis.expire(key, 60)
    return current > MAX_REQUESTS_PER_MIN

@dp.message(lambda m: m.text and not m.document)
async def handle_text(message: Message):
    user_id = message.from_user.id

    if await is_limited(user_id):
        await message.answer("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    if qa_mode_users.get(user_id):
        file = user_last_summary_file.get(user_id)
        if not file:
            await message.answer("‚ùå –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤.")
            return

        doc = await bot.download(file)
        tmp_path = f"/tmp/{uuid.uuid4()}_{file.file_name}"
        async with aiofiles.open(tmp_path, "wb") as f:
            await f.write(doc.read())

        async with aiohttp.ClientSession() as session:
            with open(tmp_path, "rb") as f:
                data = aiohttp.FormData()
                data.add_field("file", f, filename=file.file_name, content_type=file.mime_type)
                data.add_field("question", message.text)
                async with session.post(f"{FASTAPI_URL}/ask-question", data=data) as resp:
                    result = await resp.json()

        os.remove(tmp_path)

        if "error" in result:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            return

        request_id = result.get("request_id")
        await message.answer("‚åõ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å...")
        await wait_for_answer(message, request_id)
        return

    async with aiohttp.ClientSession() as session:
        async with session.post(f"{FASTAPI_URL}/summarize", json={"text": message.text}) as resp:
            data = await resp.json()
            request_id = data.get("request_id")

    await message.answer("‚åõ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è...")
    await wait_for_result(message, request_id)


async def get_file_hash(file: types.Document) -> str:
    file_obj = await bot.download(file)
    hasher = hashlib.sha256()
    while chunk := file_obj.read(8192):
        hasher.update(chunk)
    return hasher.hexdigest()

@dp.message(lambda m: m.document)
async def handle_file(message: Message):
    if await is_limited(message.from_user.id):
        await message.answer("‚è≥ –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç: 5 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        return

    file = message.document
    hash_key = f"filecache:{await get_file_hash(file)}"

    cached_summary = await redis.get(hash_key)
    if cached_summary:
        await message.answer("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ:\n\n" + cached_summary.decode())
        return

    doc = await bot.download(file)
    tmp_path = f"/tmp/{uuid.uuid4()}_{file.file_name}"
    async with aiofiles.open(tmp_path, "wb") as f:
        await f.write(doc.read())

    async with aiohttp.ClientSession() as session:
        with open(tmp_path, "rb") as f:
            data = aiohttp.FormData()
            data.add_field("file", f, filename=file.file_name, content_type=file.mime_type)
            async with session.post(f"{FASTAPI_URL}/summarize-file", data=data) as resp:
                result = await resp.json()

    qa_mode_users.pop(message.from_user.id, None)
    os.remove(tmp_path)

    if "error" in result:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
        return

    request_id = result.get("request_id")
    await message.answer("‚åõ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    await wait_for_result(message, request_id, cache_key=hash_key)

async def wait_for_result(message: Message, request_id: str, cache_key: str = None):
    for _ in range(120):
        await asyncio.sleep(2)
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{FASTAPI_URL}/status/{request_id}") as resp:
                result = await resp.json()
        if result.get("status") == "done":
            summary = result.get("summary")
            if cache_key:
                await redis.set(cache_key, summary)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ñ–∞–π–ª
            if message.document:
                user_last_summary_file[message.from_user.id] = message.document
            await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ:\n\n{summary}", reply_markup=get_ask_button())
            return

    await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–∑–∂–µ.")

async def wait_for_answer(message: Message, request_id: str):
    for _ in range(60):
        await asyncio.sleep(2)
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{FASTAPI_URL}/status/{request_id}") as resp:
                result = await resp.json()
        if result.get("status") == "done":
            answer = result.get("summary")  
            await message.answer(f"üìå –û—Ç–≤–µ—Ç:\n\n{answer}", reply_markup=get_exit_button())
            return
    await message.answer("‚ö†Ô∏è –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

@dp.callback_query(lambda c: c.data == "enter_qa_mode")
async def enter_qa_mode(callback: CallbackQuery):
    qa_mode_users[callback.from_user.id] = True
    await callback.message.answer("–¢—ã –≤ —Ä–µ–∂–∏–º–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ó–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç—É.", reply_markup=get_exit_button())
    await callback.answer()

@dp.callback_query(lambda c: c.data == "exit_qa_mode")
async def exit_qa_mode(callback: CallbackQuery):
    qa_mode_users.pop(callback.from_user.id, None)
    user_last_summary_file.pop(callback.from_user.id, None)
    await callback.message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–æ–ø—Ä–æ—Å–æ–≤.", reply_markup=menu_kb)
    await callback.answer()



async def main():
    global redis
    redis = await aioredis.from_url(REDIS_URL)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
